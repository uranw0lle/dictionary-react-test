{"version":3,"sources":["data/category.js","components/header/Header.js","components/Definitions/Definitions.js","App.js","serviceWorkerRegistration.js","index.js"],"names":["categories","value","label","Header","category","setCategory","setWord","word","setMeanings","LightMode","darkTheme","createTheme","palette","primary","main","type","handleText","debounce","text","className","ThemeProvider","theme","TextField","id","onChange","e","target","select","handleChange","countries","map","option","MenuItem","Definitions","meanings","src","phonetics","audio","style","backgroundColor","borderRadius","width","controls","mean","item","definitions","def","color","definition","example","synonyms","s","App","useState","setLightMode","DarkMode","withStyles","switchBase","grey","checked","track","Switch","dictionaryApi","a","axios","get","data","console","log","useEffect","height","transition","Container","maxWidth","display","flexDirection","justifyContent","position","top","right","paddingTop","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.9c411fc2.chunk.js","sourcesContent":["const categories = [\n    { value: \"English\", label: \"en\" },\n    { value: \"Hindi\", label: \"hi\" },\n    { value: \"Spanish\", label: \"es\" },\n    { value: \"French\", label: \"fr\" },\n    { value: \"Japanese\", label: \"ja\" },\n    { value: \"Russian\", label: \"ru\" },\n    { value: \"German\", label: \"de\" },\n    { value: \"Italian\", label: \"it\" },\n    { value: \"Korean\", label: \"ko\" },\n    { value: \"Brazilian Portuguese\", label: \"pt-BR\" },\n    { value: \"Arabic\", label: \"ar\" },\n    { value: \"Turkish\", label: \"tr\" },\n  ];\n  \n  export default categories;","import { createTheme, TextField, ThemeProvider } from \"@material-ui/core\";\nimport React from \"react\";\nimport \"./Header.css\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport countries from \"../../data/category\";\nimport { debounce } from \"lodash\";\n\nconst Header = ({\n  category,\n  setCategory,\n  setWord,\n  word,\n  setMeanings,\n  LightMode,\n}) => {\n  const darkTheme = createTheme({\n    palette: {\n      primary: {\n        main: LightMode ? \"#000\" : \"#fff\",\n      },\n      type: LightMode ? \"light\" : \"dark\",\n    },\n  });\n\n  const handleChange = (e) => {\n    setCategory(e.target.value);\n    setWord(\"\");\n    setMeanings([]);\n  };\n\n    const handleText = debounce((text) => {\n    setWord(text);\n  }, 500);\n\n  return (\n    <div className=\"header\">\n      <span className=\"title\">{word ? word : \"Find my word\"}</span>\n      <div className=\"inputs\">\n        <ThemeProvider theme={darkTheme}>\n          <TextField\n            className=\"search\"\n            id=\"filled-basic\"\n            // value={word}\n            label=\"Search a word\"\n            onChange={(e) => handleText(e.target.value)}\n          />\n          <TextField\n            select\n            label=\"Language\"\n            value={category}\n            onChange={(e) => handleChange(e)}\n            className=\"select\"\n          >\n            {countries.map((option) => (\n              <MenuItem key={option.label} value={option.label}>\n                {option.value}\n              </MenuItem>\n            ))}\n          </TextField>\n        </ThemeProvider>\n      </div>\n    </div>\n  );\n};\n\nexport default Header;","import React from 'react'\nimport './Definitions.css'\n\nexport const Definitions = ({ word, meanings, category, LightMode}) => {\n    return (\n        <div className='meanings'>\n\n            {meanings[0] && word && category ==='en' && (\n                    <audio  \n                        src={meanings[0].phonetics[0] && meanings[0].phonetics[0].audio} \n                        style={{ \n                            backgroundColor: \"#fff\", \n                            borderRadius: \"10px\", \n                            width: \"100%\",\n                        }} \n                        controls\n                        >\n                        <span>Your browser does not support audio :( </span>\n                    </audio>\n                )}\n            {word === \"\" ? (\n                <span className='subTitle'>Start by typing a word in Search </span>\n            ) : ( \n                meanings.map((mean) => \n                    mean.meanings.map((item) => \n                        item.definitions.map((def) => (\n                            <div \n                                className=\"singleMean\" \n                                style={{ \n                                    backgroundColor: LightMode ? \"#3b5360\" : \"rgb(144,144,144)\", \n                                    color: LightMode ? \"white\" : \"black\" ,\n                                }}   \n                            >  \n                            \n                                <b>{def.definition}</b>\n                                <hr style={{ \n                                    backgroundColor: LightMode ? \"#fff\" : \"#000\", \n                                    width: \"100%\", \n                                    }} />\n                                {\n                                    def.example && (\n                                        <span>\n                                            <b>Example: </b>\n                                            {def.example}\n                                        </span>\n\n                                    )}\n                                {\n                                \n                                    def.synonyms && (\n                                        <span>\n                                            <b>Synonyms: </b>\n                                            {def.synonyms.map((s) => `${s}, `)}\n                                        </span>\n\n                                )}\n                            </div>\n                        ))\n                    )\n                )\n            )}\n        </div>\n    );\n};\n","import './App.css';\nimport axios from 'axios';\nimport {useEffect, useState} from 'react';\nimport { Container, withStyles } from \"@material-ui/core\";\nimport Header from './components/header/Header';\nimport { Definitions } from './components/Definitions/Definitions.js';\nimport { grey } from '@material-ui/core/colors';\nimport Switch from '@material-ui/core/Switch';\n\n\nfunction App() {\n  const [word, setWord] = useState(\"\");\n  const [meanings, setMeanings] = useState([]);\n  const [category, setCategory] = useState(\"en\");\n  const [LightMode, setLightMode] = useState(false);\n\n  const DarkMode = withStyles({\n    switchBase: {\n      color: grey[300],\n      '&$checked': {\n        color: grey[500],\n      },\n      '&$checked + $track': {\n        backgroundColor: grey[500],\n      },\n    },\n    checked: {},\n    track: {},\n  })(Switch);\n\n\n  const dictionaryApi = async () => {\n    try {\n      const data = await axios.get(\n        `https://api.dictionaryapi.dev/api/v2/entries/${category}/${word}`\n        \n        );\n\n        setMeanings(data.data);\n\n    } catch(error) {\n\n      console.log(error);\n    }\n\n  }\n\n  useEffect(() => {\n    dictionaryApi();\n  }, ) /* [word, category] */\n\n  return (\n    <div \n      className=\"App\"\n      style={{ \n        height: \"100vh\", \n        backgroundColor: LightMode ? \"#fff\" : \"#282c34\", \n        color: LightMode ? \"black\" : \"white\",\n        transition: \"all 0.2s linear\",\n        }}\n        >\n\n      <Container \n        maxWidth=\"md\" \n        style={{ \n          display: \"flex\", \n          flexDirection:\"column\", \n          height:\"100vh\",\n          justifyContent: \"space-evenly\",\n          }}\n          >\n\n        <div style={{ position: \"absolute\", top: 0, right: 15, paddingTop: 10}}>\n          <span>{LightMode? \"Dark Mode\" : \"Light Mode\"}</span>\n\n          <DarkMode checked={LightMode} \n                    onChange={() =>setLightMode(!LightMode)} />\n        </div>\n\n        <Header category={category} \n                setCategory={setCategory} \n                word={word} \n                setWord={setWord}\n                setMeanings={setMeanings}\n                LightMode={LightMode}\n        />\n                \n        {meanings && (\n          <Definitions \n            word={word} \n            meanings={meanings} \n            category={category}\n            LightMode={LightMode} \n            \n            />\n          )}\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","  \n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.0/8 are considered localhost for IPv4.\n      window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n  );\n  \n  export function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://cra.link/PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then((registration) => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://cra.link/PWA.'\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch((error) => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n      headers: { 'Service-Worker': 'script' },\n    })\n      .then((response) => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then((registration) => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log('No internet connection found. App is running in offline mode.');\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready\n        .then((registration) => {\n          registration.unregister();\n        })\n        .catch((error) => {\n          console.error(error.message);\n        });\n    }\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorkerRegistration.register();"],"sourceRoot":""}