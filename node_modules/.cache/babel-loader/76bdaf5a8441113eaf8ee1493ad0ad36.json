{"ast":null,"code":"var _jsxFileName = \"/home/markus/dictionary-app/word-hunt/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport axios from 'axios';\nimport { useEffect, useState } from 'react';\nimport { Container, withStyles } from \"@material-ui/core\";\nimport Header from './components/header/Header';\nimport { Definitions } from './components/Definitions/Definitions.js';\nimport { grey } from '@material-ui/core/colors';\nimport Switch from '@material-ui/core/Switch';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [word, setWord] = useState(\"Word Hunt\");\n  const [meanings, setMeanings] = useState([]);\n  const [category, setCategory] = useState(\"en\");\n  const [LightMode, setLightMode] = useState(false);\n  const DarkMode = withStyles({\n    switchBase: {\n      color: grey[300],\n      '&$checked': {\n        color: grey[500]\n      },\n      '&$checked + $track': {\n        backgroundColor: grey[500]\n      }\n    },\n    checked: {},\n    track: {}\n  })(Switch);\n\n  const dictionaryApi = async () => {\n    try {\n      const data = await axios.get(`https://api.dictionaryapi.dev/api/v2/entries/${category}/${word}`);\n      setMeanings(data.data);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  console.log(meanings);\n  useEffect(() => {\n    dictionaryApi();\n  }, [word, category]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    style: {\n      height: \"100vh\",\n      backgroundColor: LightMode ? \"lightgrey\" : \"#282c34\",\n      color: \"white\"\n    },\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"md\",\n      style: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        height: \"100vh\",\n        justifyContent: \"space-evenly\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          top: 0,\n          right: 15,\n          paddingTop: 10\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: LightMode ? \"Dark Mode\" : \"Light Mode\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(DarkMode, {\n          checked: LightMode,\n          onChange: () => setLightMode(!LightMode)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Header, {\n        category: category,\n        setCategory: setCategory,\n        word: word,\n        setWord: setWord,\n        setMeanings: setMeanings\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), meanings && /*#__PURE__*/_jsxDEV(Definitions, {\n        word: word,\n        meanings: meanings,\n        category: category\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"fP+cV2nvcg9kVsE5wkC9w6A3jP8=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/markus/dictionary-app/word-hunt/src/App.js"],"names":["axios","useEffect","useState","Container","withStyles","Header","Definitions","grey","Switch","App","word","setWord","meanings","setMeanings","category","setCategory","LightMode","setLightMode","DarkMode","switchBase","color","backgroundColor","checked","track","dictionaryApi","data","get","error","console","log","height","display","flexDirection","justifyContent","position","top","right","paddingTop"],"mappings":"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","sourcesContent":["import './App.css';\nimport axios from 'axios';\nimport {useEffect, useState} from 'react';\nimport { Container, withStyles } from \"@material-ui/core\";\nimport Header from './components/header/Header';\nimport { Definitions } from './components/Definitions/Definitions.js';\nimport { grey } from '@material-ui/core/colors';\nimport Switch from '@material-ui/core/Switch';\n\nfunction App() {\n  const [word, setWord] = useState(\"Word Hunt\");\n  const [meanings, setMeanings] = useState([]);\n  const [category, setCategory] = useState(\"en\");\n  const [LightMode, setLightMode] = useState(false);\n\n  const DarkMode = withStyles({\n    switchBase: {\n      color: grey[300],\n      '&$checked': {\n        color: grey[500],\n      },\n      '&$checked + $track': {\n        backgroundColor: grey[500],\n      },\n    },\n    checked: {},\n    track: {},\n  })(Switch);\n\n\n  const dictionaryApi = async () => {\n    try {\n      const data = await axios.get(\n        `https://api.dictionaryapi.dev/api/v2/entries/${category}/${word}`\n        \n        );\n\n        setMeanings(data.data);\n\n    } catch(error) {\n\n      console.log(error);\n    }\n\n  }\n\n  console.log(meanings);\n\n  useEffect(() => {\n    dictionaryApi();\n  }, [word, category])\n\n  return (\n    <div \n      className=\"App\"\n      style={{ \n        height: \"100vh\", \n        backgroundColor: LightMode?\"lightgrey\":\"#282c34\", \n        color: \"white\"\n        }}\n        >\n\n      <Container \n        maxWidth=\"md\" \n        style={{ \n          display: \"flex\", \n          flexDirection:\"column\", \n          height:\"100vh\",\n          justifyContent: \"space-evenly\",\n          }}\n          >\n\n        <div style={{ position: \"absolute\", top: 0, right: 15, paddingTop: 10}}>\n          <span>{LightMode? \"Dark Mode\" : \"Light Mode\"}</span>\n\n          <DarkMode checked={LightMode} \n                    onChange={() =>setLightMode(!LightMode)} />\n        </div>\n\n        <Header category={category} \n                setCategory={setCategory} \n                word={word} \n                setWord={setWord}\n                setMeanings={setMeanings}\n        />\n                \n        {meanings && (\n          <Definitions \n            word={word} \n            meanings={meanings} \n            category={category} />\n          )}\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}